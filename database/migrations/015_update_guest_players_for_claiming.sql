-- Migration: Update guest players schema for claiming functionality
-- Date: 2025-09-25
-- Description: Simplify guest players and add ability to claim them when registering

-- Drop the existing tables to recreate with new schema
DROP TABLE IF EXISTS public.match_records CASCADE;
DROP TABLE IF EXISTS public.guest_player_ratings CASCADE;
DROP TABLE IF EXISTS public.guest_players CASCADE;

-- Create simplified guest_players table
CREATE TABLE IF NOT EXISTS public.guest_players (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  club_id BIGINT NOT NULL REFERENCES public.clubs(id) ON DELETE CASCADE,
  created_by UUID NOT NULL REFERENCES auth.users(id),
  claimed_by UUID REFERENCES auth.users(id), -- User who claimed this guest player profile
  claimed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  -- Index for finding unclaimed guest players by name in a club
  UNIQUE NULLS NOT DISTINCT (name, club_id) WHERE claimed_by IS NULL
);

-- Create match_records table (all matches must be associated with a club)
CREATE TABLE IF NOT EXISTS public.match_records (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  club_id BIGINT NOT NULL REFERENCES public.clubs(id) ON DELETE CASCADE,

  -- Player 1 (can be registered or guest)
  player1_user_id UUID REFERENCES auth.users(id),
  player1_guest_id BIGINT REFERENCES public.guest_players(id),

  -- Player 2 (can be registered or guest)
  player2_user_id UUID REFERENCES auth.users(id),
  player2_guest_id BIGINT REFERENCES public.guest_players(id),

  -- Scores
  player1_sets INTEGER NOT NULL CHECK (player1_sets >= 0),
  player2_sets INTEGER NOT NULL CHECK (player2_sets >= 0),

  -- Detailed scores per set
  game_scores JSONB,

  -- Winner (1 for player1, 2 for player2)
  winner INTEGER NOT NULL CHECK (winner IN (1, 2)),

  -- Match metadata
  match_type TEXT CHECK (match_type IN ('singles', 'doubles', 'practice')) DEFAULT 'singles',
  match_date TIMESTAMPTZ DEFAULT NOW(),
  duration_minutes INTEGER,
  recorded_by UUID NOT NULL REFERENCES auth.users(id),
  notes TEXT,
  location TEXT,
  court_surface TEXT CHECK (court_surface IN ('hard', 'clay', 'grass', 'indoor', 'other')),
  created_at TIMESTAMPTZ DEFAULT NOW(),

  -- Validation constraints
  CHECK (
    -- Each player must be either a user or a guest, not both
    (player1_user_id IS NOT NULL AND player1_guest_id IS NULL) OR
    (player1_user_id IS NULL AND player1_guest_id IS NOT NULL)
  ),
  CHECK (
    (player2_user_id IS NOT NULL AND player2_guest_id IS NULL) OR
    (player2_user_id IS NULL AND player2_guest_id IS NOT NULL)
  ),
  -- Players must be different
  CHECK (
    NOT (
      player1_user_id IS NOT NULL AND
      player2_user_id IS NOT NULL AND
      player1_user_id = player2_user_id
    ) AND
    NOT (
      player1_guest_id IS NOT NULL AND
      player2_guest_id IS NOT NULL AND
      player1_guest_id = player2_guest_id
    )
  ),
  -- Winner must have won more sets
  CHECK (
    (player1_sets > player2_sets AND winner = 1) OR
    (player2_sets > player1_sets AND winner = 2)
  )
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_guest_players_club ON public.guest_players(club_id);
CREATE INDEX IF NOT EXISTS idx_guest_players_claimed_by ON public.guest_players(claimed_by) WHERE claimed_by IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_guest_players_name_club ON public.guest_players(name, club_id) WHERE claimed_by IS NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_club_date ON public.match_records(club_id, match_date DESC);
CREATE INDEX IF NOT EXISTS idx_match_records_player1_user ON public.match_records(player1_user_id) WHERE player1_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_player1_guest ON public.match_records(player1_guest_id) WHERE player1_guest_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_player2_user ON public.match_records(player2_user_id) WHERE player2_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_player2_guest ON public.match_records(player2_guest_id) WHERE player2_guest_id IS NOT NULL;

-- Add trigger for updated_at
CREATE TRIGGER update_guest_players_updated_at
  BEFORE UPDATE ON public.guest_players
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- RLS Policies for guest_players
ALTER TABLE public.guest_players ENABLE ROW LEVEL SECURITY;

-- Club members can view guest players in their clubs
CREATE POLICY "Club members can view guest players"
  ON public.guest_players FOR SELECT
  USING (
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Club members can create guest players
CREATE POLICY "Club members can create guest players"
  ON public.guest_players FOR INSERT
  WITH CHECK (
    created_by = auth.uid() AND
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Users can claim unclaimed guest players
CREATE POLICY "Users can claim guest players"
  ON public.guest_players FOR UPDATE
  USING (
    claimed_by IS NULL AND
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  )
  WITH CHECK (
    claimed_by = auth.uid()
  );

-- RLS Policies for match_records
ALTER TABLE public.match_records ENABLE ROW LEVEL SECURITY;

-- Club members can view matches in their clubs
CREATE POLICY "Club members can view matches"
  ON public.match_records FOR SELECT
  USING (
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Club members can record matches
CREATE POLICY "Club members can record matches"
  ON public.match_records FOR INSERT
  WITH CHECK (
    recorded_by = auth.uid() AND
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Users can update matches they recorded
CREATE POLICY "Users can update their recorded matches"
  ON public.match_records FOR UPDATE
  USING (recorded_by = auth.uid())
  WITH CHECK (recorded_by = auth.uid());

-- Users can delete matches they recorded
CREATE POLICY "Users can delete their recorded matches"
  ON public.match_records FOR DELETE
  USING (recorded_by = auth.uid());

-- Function to claim guest player matches
CREATE OR REPLACE FUNCTION claim_guest_player_matches(
  p_guest_player_id BIGINT
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_user_id UUID;
  v_club_id BIGINT;
BEGIN
  -- Get the current user
  v_user_id := auth.uid();

  IF v_user_id IS NULL THEN
    RAISE EXCEPTION 'User not authenticated';
  END IF;

  -- Verify the guest player exists and is unclaimed
  SELECT club_id INTO v_club_id
  FROM public.guest_players
  WHERE id = p_guest_player_id
    AND claimed_by IS NULL;

  IF v_club_id IS NULL THEN
    RAISE EXCEPTION 'Guest player not found or already claimed';
  END IF;

  -- Verify user is a member of the club
  IF NOT EXISTS (
    SELECT 1 FROM public.club_users
    WHERE user_id = v_user_id AND club_id = v_club_id
  ) THEN
    RAISE EXCEPTION 'User must be a member of the club to claim this player';
  END IF;

  -- Claim the guest player
  UPDATE public.guest_players
  SET claimed_by = v_user_id,
      claimed_at = NOW()
  WHERE id = p_guest_player_id;

  -- Update all matches where this guest player was player1
  UPDATE public.match_records
  SET player1_user_id = v_user_id,
      player1_guest_id = NULL
  WHERE player1_guest_id = p_guest_player_id;

  -- Update all matches where this guest player was player2
  UPDATE public.match_records
  SET player2_user_id = v_user_id,
      player2_guest_id = NULL
  WHERE player2_guest_id = p_guest_player_id;
END;
$$;

-- Function to get claimable guest players for a user
CREATE OR REPLACE FUNCTION get_claimable_guest_players()
RETURNS TABLE(
  id BIGINT,
  name TEXT,
  club_id BIGINT,
  club_name TEXT,
  matches_played BIGINT,
  wins BIGINT,
  losses BIGINT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT
    gp.id,
    gp.name,
    gp.club_id,
    c.name as club_name,
    COUNT(DISTINCT mr.id) as matches_played,
    COUNT(DISTINCT CASE
      WHEN (mr.player1_guest_id = gp.id AND mr.winner = 1) OR
           (mr.player2_guest_id = gp.id AND mr.winner = 2)
      THEN mr.id
    END) as wins,
    COUNT(DISTINCT CASE
      WHEN (mr.player1_guest_id = gp.id AND mr.winner = 2) OR
           (mr.player2_guest_id = gp.id AND mr.winner = 1)
      THEN mr.id
    END) as losses
  FROM public.guest_players gp
  INNER JOIN public.clubs c ON c.id = gp.club_id
  LEFT JOIN public.match_records mr ON
    (mr.player1_guest_id = gp.id OR mr.player2_guest_id = gp.id)
  WHERE gp.claimed_by IS NULL
    AND gp.club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  GROUP BY gp.id, gp.name, gp.club_id, c.name;
END;
$$;