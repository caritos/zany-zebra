-- Migration: Create guest players schema for unregistered users
-- Date: 2025-09-25
-- Description: Adds support for recording matches with unregistered/guest players

-- Create guest_players table for unregistered players
CREATE TABLE IF NOT EXISTS public.guest_players (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT, -- Optional email for potential future registration
  phone TEXT, -- Optional phone for contact
  created_by UUID NOT NULL REFERENCES auth.users(id), -- Who created this guest player
  club_id BIGINT REFERENCES public.clubs(id) ON DELETE SET NULL, -- Optional club association
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  -- Allow same name but ensure unique email if provided
  UNIQUE NULLS NOT DISTINCT (email)
);

-- Create guest_player_ratings table for ELO tracking
CREATE TABLE IF NOT EXISTS public.guest_player_ratings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  guest_player_id BIGINT NOT NULL REFERENCES public.guest_players(id) ON DELETE CASCADE,
  club_id BIGINT NOT NULL REFERENCES public.clubs(id) ON DELETE CASCADE,
  elo_rating INTEGER DEFAULT 1200,
  matches_played INTEGER DEFAULT 0,
  matches_won INTEGER DEFAULT 0,
  matches_lost INTEGER DEFAULT 0,
  last_match_at TIMESTAMPTZ,
  peak_rating INTEGER DEFAULT 1200,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  -- Each guest has one rating per club
  UNIQUE(guest_player_id, club_id)
);

-- Modify matches table to support guest players
-- We'll create a new matches table that supports both registered and guest players
CREATE TABLE IF NOT EXISTS public.match_records (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  club_id BIGINT REFERENCES public.clubs(id) ON DELETE CASCADE,

  -- Player 1 (can be registered or guest)
  player1_user_id UUID REFERENCES auth.users(id),
  player1_guest_id BIGINT REFERENCES public.guest_players(id),

  -- Player 2 (can be registered or guest)
  player2_user_id UUID REFERENCES auth.users(id),
  player2_guest_id BIGINT REFERENCES public.guest_players(id),

  -- Scores
  player1_sets INTEGER NOT NULL CHECK (player1_sets >= 0),
  player2_sets INTEGER NOT NULL CHECK (player2_sets >= 0),

  -- Detailed scores per set
  game_scores JSONB,

  -- Winner (1 for player1, 2 for player2)
  winner INTEGER NOT NULL CHECK (winner IN (1, 2)),

  -- ELO tracking
  player1_elo_before INTEGER,
  player2_elo_before INTEGER,
  player1_elo_after INTEGER,
  player2_elo_after INTEGER,
  elo_change INTEGER,

  -- Match metadata
  match_type TEXT CHECK (match_type IN ('singles', 'doubles', 'practice')) DEFAULT 'singles',
  match_date TIMESTAMPTZ DEFAULT NOW(),
  duration_minutes INTEGER,
  recorded_by UUID NOT NULL REFERENCES auth.users(id),
  notes TEXT,
  location TEXT,
  court_surface TEXT CHECK (court_surface IN ('hard', 'clay', 'grass', 'indoor', 'other')),
  created_at TIMESTAMPTZ DEFAULT NOW(),

  -- Validation constraints
  CHECK (
    -- Each player must be either a user or a guest, not both
    (player1_user_id IS NOT NULL AND player1_guest_id IS NULL) OR
    (player1_user_id IS NULL AND player1_guest_id IS NOT NULL)
  ),
  CHECK (
    (player2_user_id IS NOT NULL AND player2_guest_id IS NULL) OR
    (player2_user_id IS NULL AND player2_guest_id IS NOT NULL)
  ),
  -- Players must be different
  CHECK (
    NOT (
      player1_user_id IS NOT NULL AND
      player2_user_id IS NOT NULL AND
      player1_user_id = player2_user_id
    ) AND
    NOT (
      player1_guest_id IS NOT NULL AND
      player2_guest_id IS NOT NULL AND
      player1_guest_id = player2_guest_id
    )
  ),
  -- Winner must have won more sets
  CHECK (
    (player1_sets > player2_sets AND winner = 1) OR
    (player2_sets > player1_sets AND winner = 2)
  )
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_guest_players_created_by ON public.guest_players(created_by);
CREATE INDEX IF NOT EXISTS idx_guest_players_email ON public.guest_players(email) WHERE email IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_guest_player_ratings_club ON public.guest_player_ratings(club_id, elo_rating DESC);
CREATE INDEX IF NOT EXISTS idx_match_records_club_date ON public.match_records(club_id, match_date DESC);
CREATE INDEX IF NOT EXISTS idx_match_records_player1_user ON public.match_records(player1_user_id) WHERE player1_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_player1_guest ON public.match_records(player1_guest_id) WHERE player1_guest_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_player2_user ON public.match_records(player2_user_id) WHERE player2_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_player2_guest ON public.match_records(player2_guest_id) WHERE player2_guest_id IS NOT NULL;

-- Add triggers for updated_at
CREATE TRIGGER update_guest_players_updated_at
  BEFORE UPDATE ON public.guest_players
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_guest_player_ratings_updated_at
  BEFORE UPDATE ON public.guest_player_ratings
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- RLS Policies for guest_players
ALTER TABLE public.guest_players ENABLE ROW LEVEL SECURITY;

-- Users can view guest players they created or in their clubs
CREATE POLICY "Users can view relevant guest players"
  ON public.guest_players FOR SELECT
  USING (
    created_by = auth.uid() OR
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Users can create guest players
CREATE POLICY "Users can create guest players"
  ON public.guest_players FOR INSERT
  WITH CHECK (created_by = auth.uid());

-- Users can update guest players they created
CREATE POLICY "Users can update their guest players"
  ON public.guest_players FOR UPDATE
  USING (created_by = auth.uid())
  WITH CHECK (created_by = auth.uid());

-- RLS Policies for guest_player_ratings
ALTER TABLE public.guest_player_ratings ENABLE ROW LEVEL SECURITY;

-- Users can view ratings in their clubs
CREATE POLICY "Users can view guest ratings in their clubs"
  ON public.guest_player_ratings FOR SELECT
  USING (
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- RLS Policies for match_records
ALTER TABLE public.match_records ENABLE ROW LEVEL SECURITY;

-- Users can view matches they're involved in or in their clubs
CREATE POLICY "Users can view relevant matches"
  ON public.match_records FOR SELECT
  USING (
    recorded_by = auth.uid() OR
    player1_user_id = auth.uid() OR
    player2_user_id = auth.uid() OR
    (club_id IS NOT NULL AND club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    ))
  );

-- Users can record matches
CREATE POLICY "Users can record matches"
  ON public.match_records FOR INSERT
  WITH CHECK (
    recorded_by = auth.uid() AND
    (
      -- If recording for a club, must be a member
      club_id IS NULL OR
      club_id IN (
        SELECT club_id FROM public.club_users
        WHERE user_id = auth.uid()
      )
    )
  );

-- Users can update matches they recorded
CREATE POLICY "Users can update their recorded matches"
  ON public.match_records FOR UPDATE
  USING (recorded_by = auth.uid())
  WITH CHECK (recorded_by = auth.uid());

-- Users can delete matches they recorded
CREATE POLICY "Users can delete their recorded matches"
  ON public.match_records FOR DELETE
  USING (recorded_by = auth.uid());