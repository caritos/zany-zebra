-- Migration: Add doubles match support
-- Date: 2025-09-25
-- Description: Extend match records to support doubles matches (4 players total)

-- Drop existing table to recreate with doubles support
DROP TABLE IF EXISTS public.match_records CASCADE;

-- Create match_records table with doubles support
CREATE TABLE IF NOT EXISTS public.match_records (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  club_id BIGINT NOT NULL REFERENCES public.clubs(id) ON DELETE CASCADE,

  -- Match type determines how many players are involved
  match_type TEXT CHECK (match_type IN ('singles', 'doubles', 'practice')) DEFAULT 'singles',

  -- Team 1 Players (for singles: only player1_* fields used, player2_* are NULL)
  team1_player1_user_id UUID REFERENCES auth.users(id),
  team1_player1_guest_name TEXT,
  team1_player2_user_id UUID REFERENCES auth.users(id), -- Only used for doubles
  team1_player2_guest_name TEXT, -- Only used for doubles

  -- Team 2 Players
  team2_player1_user_id UUID REFERENCES auth.users(id),
  team2_player1_guest_name TEXT,
  team2_player2_user_id UUID REFERENCES auth.users(id), -- Only used for doubles
  team2_player2_guest_name TEXT, -- Only used for doubles

  -- Scores (team-based)
  team1_sets INTEGER NOT NULL CHECK (team1_sets >= 0),
  team2_sets INTEGER NOT NULL CHECK (team2_sets >= 0),

  -- Detailed scores per set
  game_scores JSONB,

  -- Winner (1 for team1, 2 for team2)
  winner INTEGER NOT NULL CHECK (winner IN (1, 2)),

  -- Match metadata
  match_date TIMESTAMPTZ DEFAULT NOW(),
  duration_minutes INTEGER,
  recorded_by UUID NOT NULL REFERENCES auth.users(id),
  notes TEXT,
  location TEXT,
  court_surface TEXT CHECK (court_surface IN ('hard', 'clay', 'grass', 'indoor', 'other')),
  created_at TIMESTAMPTZ DEFAULT NOW(),

  -- Validation constraints
  CHECK (
    -- Each team1 player1 must be either a user or have a guest name, not both
    (team1_player1_user_id IS NOT NULL AND team1_player1_guest_name IS NULL) OR
    (team1_player1_user_id IS NULL AND team1_player1_guest_name IS NOT NULL)
  ),
  CHECK (
    -- Each team2 player1 must be either a user or have a guest name, not both
    (team2_player1_user_id IS NOT NULL AND team2_player1_guest_name IS NULL) OR
    (team2_player1_user_id IS NULL AND team2_player1_guest_name IS NOT NULL)
  ),
  -- For doubles matches, team1_player2 and team2_player2 must be specified
  CHECK (
    (match_type = 'singles' AND team1_player2_user_id IS NULL AND team1_player2_guest_name IS NULL AND team2_player2_user_id IS NULL AND team2_player2_guest_name IS NULL) OR
    (match_type = 'doubles' AND
      ((team1_player2_user_id IS NOT NULL AND team1_player2_guest_name IS NULL) OR (team1_player2_user_id IS NULL AND team1_player2_guest_name IS NOT NULL)) AND
      ((team2_player2_user_id IS NOT NULL AND team2_player2_guest_name IS NULL) OR (team2_player2_user_id IS NULL AND team2_player2_guest_name IS NOT NULL))
    ) OR
    (match_type = 'practice')
  ),
  -- No player can play against themselves
  CHECK (
    team1_player1_user_id != team2_player1_user_id AND
    team1_player1_user_id != team2_player2_user_id AND
    team1_player2_user_id != team2_player1_user_id AND
    team1_player2_user_id != team2_player2_user_id AND
    -- Within same team, players must be different for doubles
    (match_type != 'doubles' OR (team1_player1_user_id != team1_player2_user_id AND team2_player1_user_id != team2_player2_user_id))
  ),
  -- Winner must have won more sets
  CHECK (
    (team1_sets > team2_sets AND winner = 1) OR
    (team2_sets > team1_sets AND winner = 2)
  )
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_match_records_club_date ON public.match_records(club_id, match_date DESC);
CREATE INDEX IF NOT EXISTS idx_match_records_type ON public.match_records(match_type);
CREATE INDEX IF NOT EXISTS idx_match_records_team1_player1_user ON public.match_records(team1_player1_user_id) WHERE team1_player1_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_team1_player2_user ON public.match_records(team1_player2_user_id) WHERE team1_player2_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_team2_player1_user ON public.match_records(team2_player1_user_id) WHERE team2_player1_user_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_match_records_team2_player2_user ON public.match_records(team2_player2_user_id) WHERE team2_player2_user_id IS NOT NULL;

-- RLS Policies for match_records
ALTER TABLE public.match_records ENABLE ROW LEVEL SECURITY;

-- Club members can view matches in their clubs
CREATE POLICY "Club members can view matches"
  ON public.match_records FOR SELECT
  USING (
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Club members can record matches
CREATE POLICY "Club members can record matches"
  ON public.match_records FOR INSERT
  WITH CHECK (
    recorded_by = auth.uid() AND
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Users can update matches they recorded
CREATE POLICY "Users can update their recorded matches"
  ON public.match_records FOR UPDATE
  USING (recorded_by = auth.uid())
  WITH CHECK (recorded_by = auth.uid());

-- Users can delete matches they recorded
CREATE POLICY "Users can delete their recorded matches"
  ON public.match_records FOR DELETE
  USING (recorded_by = auth.uid());

-- Function to claim a specific guest player spot in a specific match
CREATE OR REPLACE FUNCTION claim_guest_match_spot(
  p_match_id BIGINT,
  p_team_number INTEGER, -- 1 or 2
  p_player_number INTEGER -- 1 or 2
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_user_id UUID;
  v_club_id BIGINT;
  v_match RECORD;
BEGIN
  -- Get the current user
  v_user_id := auth.uid();

  IF v_user_id IS NULL THEN
    RAISE EXCEPTION 'User not authenticated';
  END IF;

  -- Get the match details
  SELECT * INTO v_match
  FROM public.match_records
  WHERE id = p_match_id;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'Match not found';
  END IF;

  v_club_id := v_match.club_id;

  -- Verify user is a member of the club
  IF NOT EXISTS (
    SELECT 1 FROM public.club_users
    WHERE user_id = v_user_id AND club_id = v_club_id
  ) THEN
    RAISE EXCEPTION 'User must be a member of the club to claim this match spot';
  END IF;

  -- Verify the user is not already part of this match
  IF v_match.team1_player1_user_id = v_user_id OR
     v_match.team1_player2_user_id = v_user_id OR
     v_match.team2_player1_user_id = v_user_id OR
     v_match.team2_player2_user_id = v_user_id THEN
    RAISE EXCEPTION 'User is already part of this match';
  END IF;

  -- Claim the appropriate player spot
  IF p_team_number = 1 AND p_player_number = 1 THEN
    -- Verify team1_player1 is a guest
    IF v_match.team1_player1_guest_name IS NULL THEN
      RAISE EXCEPTION 'Team 1 Player 1 is not a guest player';
    END IF;

    UPDATE public.match_records
    SET team1_player1_user_id = v_user_id,
        team1_player1_guest_name = NULL
    WHERE id = p_match_id;

  ELSIF p_team_number = 1 AND p_player_number = 2 THEN
    -- Verify team1_player2 is a guest
    IF v_match.team1_player2_guest_name IS NULL THEN
      RAISE EXCEPTION 'Team 1 Player 2 is not a guest player';
    END IF;

    UPDATE public.match_records
    SET team1_player2_user_id = v_user_id,
        team1_player2_guest_name = NULL
    WHERE id = p_match_id;

  ELSIF p_team_number = 2 AND p_player_number = 1 THEN
    -- Verify team2_player1 is a guest
    IF v_match.team2_player1_guest_name IS NULL THEN
      RAISE EXCEPTION 'Team 2 Player 1 is not a guest player';
    END IF;

    UPDATE public.match_records
    SET team2_player1_user_id = v_user_id,
        team2_player1_guest_name = NULL
    WHERE id = p_match_id;

  ELSIF p_team_number = 2 AND p_player_number = 2 THEN
    -- Verify team2_player2 is a guest
    IF v_match.team2_player2_guest_name IS NULL THEN
      RAISE EXCEPTION 'Team 2 Player 2 is not a guest player';
    END IF;

    UPDATE public.match_records
    SET team2_player2_user_id = v_user_id,
        team2_player2_guest_name = NULL
    WHERE id = p_match_id;

  ELSE
    RAISE EXCEPTION 'Invalid team/player number. Team must be 1 or 2, Player must be 1 or 2';
  END IF;
END;
$$;