-- Enable PostGIS extension for geographic data
CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA extensions;

-- Create clubs table (regions where tennis players gather)
CREATE TABLE IF NOT EXISTS public.clubs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  zip_code TEXT NOT NULL, -- Primary zip code for the club
  city TEXT,
  state TEXT,
  country TEXT DEFAULT 'US',
  location extensions.geography(POINT) NOT NULL, -- Center point of club region
  radius_meters INTEGER DEFAULT 3000, -- Default 3km radius (about 2 miles)
  active_players_count INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add spatial index for performance
CREATE INDEX IF NOT EXISTS clubs_geo_index
  ON public.clubs USING GIST (location);

-- Add other useful indexes
CREATE INDEX IF NOT EXISTS idx_clubs_zip_code ON public.clubs(zip_code);
CREATE INDEX IF NOT EXISTS idx_clubs_city ON public.clubs(city);
CREATE INDEX IF NOT EXISTS idx_clubs_state ON public.clubs(state);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add updated_at trigger
CREATE TRIGGER update_clubs_updated_at
  BEFORE UPDATE ON public.clubs
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) policies
ALTER TABLE public.clubs ENABLE ROW LEVEL SECURITY;

-- Allow read access to clubs
CREATE POLICY "Clubs are viewable by everyone"
  ON public.clubs FOR SELECT
  USING (true);

-- Allow authenticated users to create clubs
CREATE POLICY "Authenticated users can create clubs"
  ON public.clubs FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Grant permissions
GRANT USAGE ON SCHEMA extensions TO anon, authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA extensions TO anon, authenticated;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA extensions TO anon, authenticated;