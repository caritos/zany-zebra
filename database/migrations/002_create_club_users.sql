-- Create club_users table for many-to-many relationship between clubs and users
CREATE TABLE IF NOT EXISTS public.club_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  club_id BIGINT NOT NULL REFERENCES public.clubs(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  joined_at TIMESTAMPTZ DEFAULT NOW(),
  last_active_at TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  -- Ensure a user can only join a club once
  UNIQUE(club_id, user_id)
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_club_users_club_id ON public.club_users(club_id);
CREATE INDEX IF NOT EXISTS idx_club_users_user_id ON public.club_users(user_id);

-- Add updated_at trigger
CREATE TRIGGER update_club_users_updated_at
  BEFORE UPDATE ON public.club_users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security
ALTER TABLE public.club_users ENABLE ROW LEVEL SECURITY;

-- RLS Policies for club_users

-- Users can view their own memberships
CREATE POLICY "Users can view their own club memberships"
  ON public.club_users FOR SELECT
  USING (auth.uid() = user_id);

-- Users can view other members in their clubs
CREATE POLICY "Users can view members in their clubs"
  ON public.club_users FOR SELECT
  USING (
    club_id IN (
      SELECT club_id FROM public.club_users
      WHERE user_id = auth.uid()
    )
  );

-- Users can join clubs (insert their own membership)
CREATE POLICY "Users can join clubs"
  ON public.club_users FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Users can leave clubs (delete their own membership)
CREATE POLICY "Users can leave clubs"
  ON public.club_users FOR DELETE
  USING (auth.uid() = user_id);

-- Function to update club's active player count
CREATE OR REPLACE FUNCTION update_club_player_count()
RETURNS TRIGGER AS $$
BEGIN
  -- Update the count for the affected club
  IF TG_OP = 'DELETE' THEN
    UPDATE public.clubs
    SET active_players_count = (
      SELECT COUNT(*)
      FROM public.club_users
      WHERE club_id = OLD.club_id
    )
    WHERE id = OLD.club_id;
    RETURN OLD;
  ELSE
    UPDATE public.clubs
    SET active_players_count = (
      SELECT COUNT(*)
      FROM public.club_users
      WHERE club_id = NEW.club_id
    )
    WHERE id = NEW.club_id;
    RETURN NEW;
  END IF;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update club player counts
CREATE TRIGGER update_club_player_count_trigger
  AFTER INSERT OR UPDATE OR DELETE ON public.club_users
  FOR EACH ROW
  EXECUTE FUNCTION update_club_player_count();